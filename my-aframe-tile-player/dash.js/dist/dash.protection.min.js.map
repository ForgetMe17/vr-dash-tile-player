{"version":3,"file":"dash.protection.min.js","sourceRoot":"./src/","sources":["..\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","core\\Utils.js","core\\errors\\ErrorsBase.js","core\\events\\EventsBase.js","streaming\\constants\\ProtectionConstants.js","streaming\\protection\\CommonEncryption.js","streaming\\protection\\Protection.js","streaming\\protection\\ProtectionEvents.js","streaming\\protection\\controllers\\ProtectionController.js","streaming\\protection\\controllers\\ProtectionKeyController.js","streaming\\protection\\drm\\KeySystemClearKey.js","streaming\\protection\\drm\\KeySystemPlayReady.js","streaming\\protection\\drm\\KeySystemW3CClearKey.js","streaming\\protection\\drm\\KeySystemWidevine.js","streaming\\protection\\errors\\ProtectionErrors.js","streaming\\protection\\models\\ProtectionModel_01b.js","streaming\\protection\\models\\ProtectionModel_21Jan2015.js","streaming\\protection\\models\\ProtectionModel_3Feb2014.js","streaming\\protection\\servers\\ClearKey.js","streaming\\protection\\servers\\DRMToday.js","streaming\\protection\\servers\\PlayReady.js","streaming\\protection\\servers\\Widevine.js","streaming\\protection\\vo\\ClearKeyKeySet.js","streaming\\protection\\vo\\KeyMessage.js","streaming\\protection\\vo\\KeyPair.js","streaming\\protection\\vo\\KeySystemAccess.js","streaming\\protection\\vo\\KeySystemConfiguration.js","streaming\\protection\\vo\\LicenseRequest.js","streaming\\protection\\vo\\LicenseResponse.js","streaming\\protection\\vo\\MediaCapability.js","streaming\\protection\\vo\\NeedKey.js","streaming\\vo\\DashJSError.js","streaming\\vo\\metrics\\HTTPRequest.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\n\nclass Utils {\n    static mixin(dest, source, copy) {\n        let s;\n        let empty = {};\n        if (dest) {\n            for (let name in source) {\n                if (source.hasOwnProperty(name)) {\n                    s = source[name];\n                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {\n                        if (typeof dest[name] === 'object' && dest[name] !== null) {\n                            dest[name] = Utils.mixin(dest[name], s, copy);\n                        } else {\n                            dest[name] = copy(s);\n                        }\n                    }\n                }\n            }\n        }\n        return dest;\n    }\n\n    static clone(src) {\n        if (!src || typeof src !== 'object') {\n            return src; // anything\n        }\n        let r;\n        if (src instanceof Array) {\n            // array\n            r = [];\n            for (let i = 0, l = src.length; i < l; ++i) {\n                if (i in src) {\n                    r.push(Utils.clone(src[i]));\n                }\n            }\n        } else {\n            r = {};\n        }\n        return Utils.mixin(r, src, Utils.clone);\n    }\n\n    static addAditionalQueryParameterToUrl(url, params) {\n        try {\n            if (!params || params.length === 0) {\n                return url;\n            }\n\n            let modifiedUrl = new URL(url);\n\n            params.forEach((param) => {\n                if (param.key && param.value) {\n                    modifiedUrl.searchParams.set(param.key, param.value);\n                }\n            });\n\n            return modifiedUrl.href;\n\n\n        } catch (e) {\n            return url;\n        }\n    }\n\n    static parseHttpHeaders (headerStr) {\n        let headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            let headerPair = headerPairs[i];\n            let index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    static generateUuid() {\n        let dt = new Date().getTime();\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    static generateHashCode(string) {\n        let hash = 0;\n\n        if (string.length === 0) {\n            return hash;\n        }\n\n        for (let i = 0; i < string.length; i++) {\n            const chr = string.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0;\n        }\n        return hash;\n    }\n}\n\nexport default Utils;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass ErrorsBase {\n    extend (errors, config) {\n        if (!errors) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const err in errors) {\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\n            this[err] = errors[err];\n\n        }\n    }\n}\n\nexport default ErrorsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n\n            // Remove whitespaces and newlines from pssh text\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null || data === undefined)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionErrors from './errors/ProtectionErrors';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n    let instance;\n    const context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n        let controller = null;\n\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                eventBus: config.eventBus,\n                debug: config.debug,\n                events: config.events,\n                BASE64: config.BASE64,\n                constants: config.constants,\n                cmcdModel: config.cmcdModel\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n        const debug = config.debug;\n        const logger = debug.getLogger(instance);\n        const eventBus = config.eventBus;\n        const errHandler = config.errHandler;\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\n        } else {\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n        for (let i = 0; i < apis.length; i++) {\n            const api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\nfactory.errors = ProtectionErrors;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n  */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Sending a license rquest\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\n         */\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport LicenseRequest from '../vo/LicenseRequest';\nimport LicenseResponse from '../vo/LicenseResponse';\nimport { HTTPRequest } from '../../vo/metrics/HTTPRequest';\nimport Utils from '../../../core/Utils';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n    const cmcdModel = config.cmcdModel;\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem,\n        licenseRequestFilters,\n        licenseResponseFilters;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n        licenseRequestFilters = [];\n        licenseResponseFilters = [];\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     * @ignore\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Removes all entries from the mediaInfoArr array for a specific stream id\n     * @param {String} streamId\n     */\n    function clearMediaInfoArrayByStreamId(streamId) {\n        mediaInfoArr = mediaInfoArr.filter((mediaInfo) => {\n            return mediaInfo.streamInfo.id !== streamId;\n        });\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     * @ignore\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        checkConfig();\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     * @ignore\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            if (_isInitDataDuplicate(initDataForKS)) {\n                return;\n            }\n\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\n                });\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\n            });\n        }\n    }\n\n    /**\n     * Checks if the provided init data is equal to one of the existing init data values\n     * @param {any} initDataForKS\n     * @return {boolean}\n     * @private\n     */\n    function _isInitDataDuplicate(initDataForKS) {\n\n        if (!initDataForKS) {\n            return false;\n        }\n\n        try {\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.debug('DRM: Ignoring initData because we have already seen it!');\n                    return true;\n                }\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @ignore\n     */\n    function loadKeySession(sessionID, initData) {\n        checkConfig();\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function removeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function closeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        checkConfig();\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        checkConfig();\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function reset() {\n        checkConfig();\n\n        licenseRequestFilters = [];\n        licenseResponseFilters = [];\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n\n        // Reorder key systems according to priority order provided in protectionData\n        supportedKS = supportedKS.sort((ksA, ksB) => {\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\n            return indexA - indexB;\n        });\n\n\n        // First time, so we need to select a key system\n        if (keySystem === undefined) {\n            _selectInitialKeySystem(supportedKS, fromManifest);\n        }\n\n        // We already selected a key system. we only need to trigger a new license exchange if the init data has changed\n        else if (keySystem) {\n            _selectWithExistingKeySystem(supportedKS, fromManifest);\n        }\n\n        // We are in the process of selecting a key system, so just save the data which might be coming from additional AdaptationSets.\n        else {\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function _selectWithExistingKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        const ksIdx = supportedKS.findIndex((entry) => {\n            return entry.ks === keySystem;\n        });\n\n        if (ksIdx === -1 || !supportedKS[ksIdx].initData) {\n            return;\n        }\n\n        //  we only need to call this if the init data has changed\n        const initDataForKs = CommonEncryption.getPSSHForKeySystem(keySystem, supportedKS[ksIdx].initData);\n        if (_isInitDataDuplicate(initDataForKs)) {\n            return;\n        }\n\n        requestedKeySystems.push({\n            ks: supportedKS[ksIdx].ks,\n            configs: [getKeySystemConfiguration(keySystem)]\n        });\n\n        // Ensure that we would be granted key system access using the key\n        // system and codec information\n        const onKeySystemAccessComplete = function (event) {\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (event.error) {\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\n                }\n            } else {\n                logger.info('DRM: KeySystem Access Granted');\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\n                const protData = getProtData(keySystem);\n                if (protectionKeyController.isClearKey(keySystem)) {\n                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                    // initData and overwrite possible initData indicated in encrypted event (EME)\n                    if (protData && protData.hasOwnProperty('clearkeys')) {\n                        const initData = { kids: Object.keys(protData.clearkeys) };\n                        supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                    }\n                }\n                if (supportedKS[ksIdx].sessionId) {\n                    // Load MediaKeySession with sessionId\n                    loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                } else if (supportedKS[ksIdx].initData) {\n                    // Create new MediaKeySession with initData\n                    createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                }\n            }\n        };\n\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\n    }\n\n    function _selectInitialKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n        let ksIdx;\n\n        // First time through, so we need to select a key system\n        keySystem = null;\n        pendingNeedKeyData.push(supportedKS);\n\n        // Add all key systems to our request list since we have yet to select a key system\n        for (let i = 0; i < supportedKS.length; i++) {\n            requestedKeySystems.push({\n                ks: supportedKS[i].ks,\n                configs: [getKeySystemConfiguration(supportedKS[i].ks)]\n            });\n        }\n\n        let keySystemAccess;\n        const onKeySystemAccessComplete = function (event) {\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (event.error) {\n                keySystem = undefined;\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                        data: null,\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\n                    });\n                }\n            } else {\n                keySystemAccess = event.data;\n                logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                protectionModel.selectKeySystem(keySystemAccess);\n            }\n        };\n        var onKeySystemSelected = function (event) {\n            eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (!event.error) {\n                if (!protectionModel) {\n                    return;\n                }\n                keySystem = protectionModel.getKeySystem();\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\n                // Set server certificate from protData\n                const protData = getProtData(keySystem);\n                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                }\n\n                // Create key session for the remaining AdaptationSets which have been added to pendingNeedKeyData\n                for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                    for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                        if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                            if (protectionKeyController.isClearKey(keySystem)) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                            }\n                            if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                            } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } else {\n                keySystem = undefined;\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                        data: null,\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\n                    });\n                }\n            }\n        };\n\n        eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys) {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            // For clearkey use the url defined in the manifest\n            if (protectionKeyController.isClearKey(keySystem)) {\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\n            } else {\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\n                if (!url) {\n                    url = e.data.laURL;\n                }\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status === 200) {\n                let licenseResponse = new LicenseResponse(xhr.responseURL, Utils.parseHttpHeaders(xhr.getAllResponseHeaders ? xhr.getAllResponseHeaders() : null), xhr.response);\n                applyFilters(licenseResponseFilters, licenseResponse).then(() => {\n                    const licenseMessage = licenseServerData.getLicenseMessage(licenseResponse.data, keySystemString, messageType);\n                    if (licenseMessage !== null) {\n                        sendLicenseRequestCompleteEvent(eventData);\n                        protectionModel.updateKeySession(sessionToken, licenseMessage);\n                    } else {\n                        reportError(xhr, eventData, keySystemString, messageType);\n                    }\n                });\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n        const sessionId = sessionToken.getSessionID() || null;\n\n        let licenseRequest = new LicenseRequest(url, reqMethod, responseType, reqHeaders, withCredentials, messageType, sessionId, reqPayload);\n        applyFilters(licenseRequestFilters, licenseRequest).then(() => {\n            doLicenseRequest(licenseRequest, LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\n        });\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError) {\n        const xhr = new XMLHttpRequest();\n\n        const cmcdParams = cmcdModel.getQueryParameter({\n            url: request.url,\n            type: HTTPRequest.LICENSE\n        });\n\n        if (cmcdParams) {\n            request.url = Utils.addAditionalQueryParameterToUrl(request.url, [cmcdParams]);\n        }\n\n        xhr.open(request.method, request.url, true);\n        xhr.responseType = request.responseType;\n        xhr.withCredentials = request.withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in request.headers) {\n            xhr.setRequestHeader(key, request.headers[key]);\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            setTimeout(function () {\n                doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError);\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\n        };\n\n        xhr.onload = function () {\n            if (this.status === 200 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        // deprecated, to be removed\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\n            url: request.url,\n            headers: request.headers,\n            payload: request.data,\n            sessionId: request.sessionId\n        });\n\n        xhr.send(request.data);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                if (_isInitDataDuplicate(initDataForKS)) {\n                    return;\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    function setKeySystems(keySystems) {\n        if (protectionKeyController) {\n            protectionKeyController.setKeySystems(keySystems);\n        }\n    }\n\n    function setLicenseRequestFilters (filters) {\n        licenseRequestFilters = filters;\n    }\n\n    function setLicenseResponseFilters (filters) {\n        licenseResponseFilters = filters;\n    }\n\n    function applyFilters (filters, param) {\n        if (!filters) return Promise.resolve();\n        return filters.reduce((prev, next) => {\n            return prev.then(() => {\n                return next(param);\n            });\n        }, Promise.resolve());\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        clearMediaInfoArrayByStreamId: clearMediaInfoArrayByStreamId,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        setLicenseRequestFilters: setLicenseRequestFilters,\n        setLicenseResponseFilters: setLicenseResponseFilters,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @ignore\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Sets the prioritized list of key systems to be supported\n     * by this player.\n     *\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function setKeySystems(newKeySystems) {\n        keySystems = newKeySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp, cencContentProtection);\n\n                        supportedKS.push({\n                            ks: keySystems[ksIdx],\n                            initData: initData,\n                            cdmData: ks.getCDMData(),\n                            sessionId: ks.getSessionId(cp)\n                        });\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n        attributes: ['Laurl', 'laurl'],\n        prefixes: ['clearkey', 'dashif']\n    };\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp, cencContentProtection) {\n        try {\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n\n            if (!initData && cencContentProtection) {\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n                const data = {kids: [cencDefaultKid]};\n                initData = new TextEncoder().encode(JSON.stringify(data));\n            }\n\n            return initData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\n        try {\n            let kid = cencDefaultKid.replace(/-/g, '');\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\n                return String.fromCharCode(parseInt(a, 16));\n            }).join(''));\n            return kid.replace(/=/g, '');\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        // Set content type to application/json by default\n        return {\n            'Content-Type': 'application/json'\n        };\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n        try {\n            if (!mediaInfo || mediaInfo.length === 0) {\n                return null;\n            }\n            let i = 0;\n            let licenseServer = null;\n            while (i < mediaInfo.length && !licenseServer) {\n                const info = mediaInfo[i];\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n                    });\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\n                        let j = 0;\n                        while (j < clearkeyProtData.length && !licenseServer) {\n                            const ckData = clearkeyProtData[j];\n                            let k = 0;\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                                let l = 0;\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                                        licenseServer = ckData[attribute].__text;\n                                    }\n                                    l += 1;\n                                }\n                                k += 1;\n                            }\n                            j += 1;\n                        }\n                    }\n                }\n                i += 1;\n            }\n            return licenseServer;\n        } catch\n            (e) {\n            return null;\n        }\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getLicenseServerUrlFromMediaInfo,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf-16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else {\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\n            // thus it contains direclty the challenge itself\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        if (!cpData) {\n            return null;\n        }\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf-8' && format !== 'utf-16') {\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionDataSet} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\n/**\n * @class\n */\nclass ProtectionErrors extends ErrorsBase {\n\tconstructor () {\n        super();\n\n        /**\n         *  Generid key Error code\n         */\n        this.MEDIA_KEYERR_CODE = 100;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\n\n        /**\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\n         */\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\n        /**\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\n         */\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\n        /**\n         *  Error code returned when License server certificate has not been successfully updated\n         */\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\n        /**\n         *  Error code returned when license validity has expired\n         */\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\n        /**\n         *  Error code returned when no licenser url is defined\n         */\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\n        /**\n         *  Error code returned when key system access is denied\n         */\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\n        /**\n         *  Error code returned when key session has not been successfully created\n         */\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\n        /**\n         *  Error code returned when license request failed after a keymessage event has been triggered\n         */\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\n\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\n    }\n}\n\nlet protectionErrors = new ProtectionErrors();\nexport default protectionErrors;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(code, msg, sessionToken) });\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                closeKeySessionInternal(session).catch(function () {\n                    removeSession(session);\n                });\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, { error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name) });\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (initData ||  (protData && protData.clearkeys)) ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\n            });\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken) });\n        });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')\n                });\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)\n            });\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: sessionToken.getSessionID() });\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\n                data: null,\n                error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name\n            });\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\n                data: null,\n                error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name\n            });\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Insecure origins are not allowed' });\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            let systemString = keySystem.systemString;\n\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\n                systemString += '.recommendation';\n            }\n\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                    mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! ' + error.message });\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, event.initDataType) });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: this });\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, { error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE) });\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, undefined, event.messageType) });\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: token.getSessionID() });\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /* message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n * @ignore\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @ignore\n */\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Defines a license request\n * @ignore\n */\nclass LicenseRequest {\n    /**\n     * Defines a license request\n     *\n     * @class\n     */\n    constructor(url, method, responseType, headers, withCredentials, messageType, sessionId, data) {\n\n        /**\n         * The license request url\n         */\n        this.url = url;\n\n        /**\n         * The HTTP method\n         */\n        this.method = method;\n\n        /**\n         * The HTTP response type\n         */\n        this.responseType = responseType;\n\n        /**\n         * The HTP request headers\n         */\n        this.headers = headers;\n\n        /**\n         * Wether request is done using credentials (cross-site cookies)\n         */\n        this.withCredentials = withCredentials;\n\n        /**\n         * The license request message type (see https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)\n         */\n        this.messageType = messageType;\n\n        /**\n         * The corresponding EME session ID\n         */\n        this.sessionId = sessionId;\n\n        /**\n         * The license request data\n         */\n        this.data = data;\n    }\n}\n\nexport default LicenseRequest;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Defines a license response\n */\nclass LicenseResponse {\n    /**\n     * Defines a license request\n     *\n     * @class\n     * @ignore\n     */\n    constructor(url, headers, data) {\n\n        /**\n         * The url that was loaded, that can be redirected from original request url\n         */\n        this.url = url;\n\n        /**\n         * The HTP response headers\n         */\n        this.headers = headers;\n\n        /**\n         * The license response data\n         */\n        this.data = data;\n    }\n}\n\nexport default LicenseResponse;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DashJSError {\n    constructor(code, message, data) {\n        this.code = code || null;\n        this.message = message || null;\n        this.data = data || null;\n    }\n}\n\nexport default DashJSError;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\n * by Metrics Reporting code.\n * @ignore\n */\nclass HTTPRequest {\n    /**\n     * @class\n     */\n    constructor() {\n        /**\n         * Identifier of the TCP connection on which the HTTP request was sent.\n         * @public\n         */\n        this.tcpid = null;\n        /**\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\n         * The type of the request:\n         * - MPD\n         * - XLink expansion\n         * - Initialization Fragment\n         * - Index Fragment\n         * - Media Fragment\n         * - Bitstream Switching Fragment\n         * - other\n         * @public\n         */\n        this.type = null;\n        /**\n         * The original URL (before any redirects or failures)\n         * @public\n         */\n        this.url = null;\n        /**\n         * The actual URL requested, if different from above\n         * @public\n         */\n        this.actualurl = null;\n        /**\n         * The contents of the byte-range-spec part of the HTTP Range header.\n         * @public\n         */\n        this.range = null;\n        /**\n         * Real-Time | The real time at which the request was sent.\n         * @public\n         */\n        this.trequest = null;\n        /**\n         * Real-Time | The real time at which the first byte of the response was received.\n         * @public\n         */\n        this.tresponse = null;\n        /**\n         * The HTTP response code.\n         * @public\n         */\n        this.responsecode = null;\n        /**\n         * The duration of the throughput trace intervals (ms), for successful requests only.\n         * @public\n         */\n        this.interval = null;\n        /**\n         * Throughput traces, for successful requests only.\n         * @public\n         */\n        this.trace = [];\n\n        /**\n         * Type of stream (\"audio\" | \"video\" etc..)\n         * @public\n         */\n        this._stream = null;\n        /**\n         * Real-Time | The real time at which the request finished.\n         * @public\n         */\n        this._tfinish = null;\n        /**\n         * The duration of the media requests, if available, in seconds.\n         * @public\n         */\n        this._mediaduration = null;\n        /**\n         * The media segment quality\n         * @public\n         */\n        this._quality = null;\n        /**\n         * all the response headers from request.\n         * @public\n         */\n        this._responseHeaders = null;\n        /**\n         * The selected service location for the request. string.\n         * @public\n         */\n        this._serviceLocation = null;\n    }\n}\n\n/**\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\n * @ignore\n */\nclass HTTPRequestTrace {\n    /**\n    * @class\n    */\n    constructor() {\n        /**\n         * Real-Time | Measurement stream start.\n         * @public\n         */\n        this.s = null;\n        /**\n         * Measurement stream duration (ms).\n         * @public\n         */\n        this.d = null;\n        /**\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\n         * @public\n         */\n        this.b = [];\n    }\n}\n\nHTTPRequest.GET = 'GET';\nHTTPRequest.HEAD = 'HEAD';\nHTTPRequest.MPD_TYPE = 'MPD';\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\nHTTPRequest.LICENSE = 'license';\nHTTPRequest.OTHER_TYPE = 'other';\n\nexport { HTTPRequest, HTTPRequestTrace };\n"],"names":["f","g","exports","module","define","amd","window","global","self","this","dashjs","Protection","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","Utils","dest","source","copy","s","empty","_name","hasOwnProperty","mixin","src","undefined","Array","l","push","clone","url","params","modifiedUrl","URL","forEach","param","key","value","searchParams","set","href","headerStr","headers","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","dt","Date","getTime","replace","Math","random","floor","toString","string","hash","charCodeAt","ErrorsBase","errors","config","err","override","publicOnly","EventsBase","events","evt","ProtectionConstants","init","constants","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","__text","decodeArray","buffer","data","dv","byteCursor","nextBox","systemID","boxStart","byteLength","val","APIS_ProtectionModel_01b","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","APIS_ProtectionModel_3Feb2014","setMediaKeys","MediaKeys","release","error","message","ready","close","instance","context","getAPI","videoElement","apis","api","Object","keys","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","getInstance","setConfig","debug","initialize","logger","eventBus","errHandler","protectionModel","getLogger","videoModel","getElement","onencrypted","mediaKeys","info","_modelsProtectionModel_3Feb20142","create","_modelsProtectionModel_01b2","warn","_modelsProtectionModel_21Jan20152","_controllersProtectionController2","cmcdModel","capabilities","setEncryptedMediaSupported","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","_errorsProtectionErrors2","updateClassFactory","ProtectionEvents","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","LICENSE_REQUEST_SENDING","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","needkeyRetries","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","licenseRequestFilters","licenseResponseFilters","checkConfig","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","_isInitDataDuplicate","getSessionType","trigger","_voDashJSError2","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","systemString","currentInitData","getAllInitData","initDataEquals","loadKeySession","sessionID","setMediaElement","element","on","onNeedKey","off","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","_voMediaCapability2","codec","VIDEO","_voKeySystemConfiguration2","selectKeySystem","supportedKS","fromManifest","sort","ksA","ksB","ks","priority","requestedKeySystems","ksIdx","configs","onKeySystemAccessComplete","event","onKeySystemSelected","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","keySystemAccess","getKeySystem","serverCertificate","setServerCertificate","isClearKey","kids","clearkeys","TextEncoder","encode","JSON","stringify","sessionId","requestKeySystemAccess","_selectInitialKeySystem","findIndex","entry","_selectWithExistingKeySystem","sendLicenseRequestCompleteEvent","onKeyStatusChanged","status","onKeyMessage","keyMessage","messageType","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","reqHeaders","withCredentials","reportError","onLoad","onAbort","onError","reqMethod","timeout","licenseRequest","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","updateHeaders","httpRequestHeaders","getRequestHeadersFromMessage","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","licenseResponse","_voLicenseResponse2","responseURL","_coreUtils2","parseHttpHeaders","getAllResponseHeaders","applyFilters","then","licenseMessage","getLicenseMessage","reqPayload","getLicenseRequestFromMessage","getHTTPMethod","responseType","getResponseType","isNaN","httpTimeout","_voLicenseRequest2","doLicenseRequest","request","retriesCount","XMLHttpRequest","cmcdParams","getQueryParameter","_voMetricsHTTPRequest","HTTPRequest","LICENSE","addAditionalQueryParameterToUrl","open","method","setRequestHeader","retryRequest","setTimeout","onload","ontimeout","onerror","onabort","payload","send","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","filters","reduce","prev","next","Promise","resolve","initializeForMedia","mediaInfo","getSupportedKeySystemsFromContentProtection","contentProtection","clearMediaInfoArrayByStreamId","streamId","filter","streamInfo","id","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","setLicenseRequestFilters","setLicenseResponseFilters","stop","reset","retryTimeout","clearTimeout","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","_drmKeySystemW3CClearKey2","protectionDataSet","initData1","initData2","data1","data2","j","newKeySystems","getKeySystemBySystemString","cpIdx","cencContentProtection","findCencContentProtection","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","getSingletonFactory","KeySystemClearKey","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","parseInitDataFromContentProtection","cencDefaultKid","kid","btoa","match","map","parseInt","join","cencDefaultKidToBase64Representation","Content-Type","parse","licenseServer","clearkeyProtData","ckData","k","attribute","prefix","__prefix","protectionData","clearkeySet","jsonMsg","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PSSHBox","PSSHData","pro","prheader","PSSHBoxBuffer","setUint32","xmlDoc","parser","DOMParser","dataview","Uint16Array","msg","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","setPlayReadyMessageFormat","format","KeySystemW3CClearKey","KeySystemWidevine","ProtectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","protectionErrors","ProtectionModel_01b","pendingSessions","sessions","moreSessionsAllowed","eventHandler","removeEventListeners","findSessionByID","sessionArray","len","removeEventListener","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","newSession","getExpirationTime","NaN","keyID","handleEvent","_voNeedKey2","errorCode","systemCode","shift","_voKeyMessage2","defaultURL","ProtectionModel_21Jan2015","closeKeySessionInternal","session","removeSession","token","splice","parseKeyStatus","args","keyId","createSessionToken","target","keyStatuses","keyStatus","arguments","expiration","getKeyStatuses","getUsable","usable","closed","requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","name","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","ProtectionModel_3Feb2014","doSetKeys","boundDoSetKeys","bind","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","destinationURL","ClearKey","serverResponse","keypair","keyid","DRMToday","license","keySystemStr","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","stringResponse","envelope","getElementsByTagNameNS","body","faultstring","statusCode","fault","detail","exception","node","firstChild","idStart","lastIndexOf","idEnd","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","LicenseRequest","LicenseResponse","MediaCapability","robustness","NeedKey","DashJSError","tcpid","actualurl","range","trequest","tresponse","responsecode","interval","trace","_stream","_tfinish","_mediaduration","_quality","_responseHeaders","_serviceLocation","HTTPRequestTrace","d","b","GET","HEAD","MPD_TYPE","XLINK_EXPANSION_TYPE","INIT_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE"],"mappings":"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"}